
DESIGN CODDE

module up_down_counter (
    input wire clk,
    input wire reset,
    input wire up_down,
    output reg [3:0] count
);

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 4'b0000;
    end else begin
        if (up_down)
            count <= count + 1;
        else
            count <= count - 1;
    end
end

endmodule


 
TEST_BENCH_CODE


module testbench;
    reg clk;
    reg reset;
    reg up_down;
    wire [3:0] count;

    up_down_counter uut (
        .clk(clk),
        .reset(reset),
        .up_down(up_down),
        .count(count)
    );

    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, testbench);

        reset = 1;
        up_down = 1;

        #15 reset = 0;

        #50;

        up_down = 0;

        #50;

        reset = 1;
        #10 reset = 0;

        up_down = 1;

        #50;

        $finish;
    end
endmodule

